═══════════════════════════════════════════════════════════════
  蓝信通讯 - Monorepo项目
═══════════════════════════════════════════════════════════════

GitHub仓库: https://github.com/zhihang9978/-IM.git

═══════════════════════════════════════════════════════════════
项目结构
═══════════════════════════════════════════════════════════════

lanxin-communication/
├── apps/
│   ├── android/          原生Android客户端 (Kotlin + MVVM)
│   ├── admin-web/        React后台管理前端
│   └── backend/          Go后端服务
└── packages/
    └── (共享配置和类型)

═══════════════════════════════════════════════════════════════
技术栈
═══════════════════════════════════════════════════════════════

后端: Go 1.21 + Gin + MySQL + Redis + Kafka + WebSocket
前端: React 18 + TypeScript + Vite + Ant Design
移动: Android Native + Kotlin + MVVM + Room + Retrofit

═══════════════════════════════════════════════════════════════
⚠️ 重要配置说明
═══════════════════════════════════════════════════════════════

1. COS对象存储 = 自建服务（MinIO），不是腾讯云！
2. TRTC音视频 = 腾讯云SDK（仅数据流接口，不调用UI组件）
3. 所有UI必须响应式（禁止px硬编码）
4. 所有后台操作记录操作日志

═══════════════════════════════════════════════════════════════
核心文档
═══════════════════════════════════════════════════════════════

📖 快速启动:        QUICK_START.txt
📖 API接口文档:     apps/backend/API_DOCUMENTATION.md
📖 COS部署指南:     apps/backend/COS_SETUP.txt
📖 COS配置说明:     IMPORTANT_COS_IS_SELF_HOSTED.txt
📖 项目计划书:      蓝信通讯项目的总体计划书.txt
📖 UI原型参考:      后台管理系统界面需求示例.txt
📖 UI原型参考:      安卓前端UI需求示例.txt

═══════════════════════════════════════════════════════════════
快速启动
═══════════════════════════════════════════════════════════════

# 后端服务
cd apps/backend
go run cmd/server/main.go

# Web后台
cd apps/admin-web
pnpm install && pnpm dev

# Android应用
使用Android Studio打开 apps/android/

详细说明见 QUICK_START.txt

═══════════════════════════════════════════════════════════════
环境要求
═══════════════════════════════════════════════════════════════

✓ Go 1.21+
✓ Node.js 18+ + pnpm 8+
✓ MySQL 8.0 + Redis 7.0 + Kafka 3.0
✓ MinIO (自建COS对象存储)
✓ Android Studio + JDK 17

═══════════════════════════════════════════════════════════════
部署分工
═══════════════════════════════════════════════════════════════

Claude:  负责代码开发 ✅ 已完成
Devin:   负责部署和打包

═══════════════════════════════════════════════════════════════

