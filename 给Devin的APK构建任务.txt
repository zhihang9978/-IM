====================================================================
            📱 给 Devin 的新任务：构建Android APK
====================================================================

🎯 任务目标
-----------
在你的**本地开发机器**上构建Android APK，让用户测试客户端功能

⚠️ 重要提醒
-----------
1. 在你的本地开发环境执行（Windows/Mac/Linux）
2. 不是在生产服务器（154.40.45.121）上执行
3. 需要有Android开发环境（JDK 17 + Android SDK）

📖 执行文档
-----------
完整步骤见: DEVIN_BUILD_ANDROID_APK.md

====================================================================
            🚀 快速执行（8步）
====================================================================

Step 1: 在本地开发机器打开终端
-------------------------------
# 不是SSH到服务器！是在你的本地电脑上！

Step 2: 进入项目目录
-------------------
cd /path/to/your/local/im-lanxin
# 如果没有clone，先clone:
# git clone https://github.com/zhihang9978/-IM.git im-lanxin

Step 3: 删除旧的Android构建文件
------------------------------
cd apps/android
rm -rf app/build build .gradle
cd ../..

# Windows PowerShell:
# cd apps\android
# Remove-Item -Recurse -Force app\build, build, .gradle -ErrorAction SilentlyContinue
# cd ..\..

Step 4: 拉取最新代码
------------------
git pull origin master
git log --oneline -3
# 应该看到: 30a2384 或更新

Step 5: 配置服务器地址 ⭐重要
--------------------------
修改这2个文件（改为实际服务器IP）:

文件1: apps/android/app/src/main/java/com/lanxin/im/data/remote/RetrofitClient.kt
修改: private const val BASE_URL = "http://154.40.45.121:8080/api/v1/"

文件2: apps/android/app/src/main/java/com/lanxin/im/data/remote/WebSocketClient.kt
修改: private const val WS_URL = "ws://154.40.45.121:8080/ws"

Step 6: 构建APK ⭐
-----------------
cd apps/android
./gradlew clean
./gradlew assembleDebug

# Windows:
# gradlew.bat clean
# gradlew.bat assembleDebug

期望输出:
BUILD SUCCESSFUL in 3-5 minutes

Step 7: 找到APK文件
------------------
APK位置:
apps/android/app/build/outputs/apk/debug/app-debug.apk

检查大小:
ls -lh app/build/outputs/apk/debug/app-debug.apk
# 期望: 15-30 MB

Step 8: 提供APK给用户
--------------------
方式1: 上传到文件分享（Google Drive/百度网盘等）
方式2: 直接发送文件（如果<50MB）
方式3: 上传到服务器的静态目录

告诉用户:
✅ APK已构建完成
✅ 版本: 1.0 Debug
✅ 服务器: 154.40.45.121:8080
✅ 测试账号: testuser1 / password123

====================================================================
            ⚠️ 关键提醒
====================================================================

1. 在本地机器构建，不是服务器
   ❌ ssh 154.40.45.121  # 错误
   ✅ cd ~/projects/im-lanxin  # 正确

2. 删除旧构建文件
   必须先删除 apps/android/build 等目录

3. 配置服务器地址
   必须修改为 http://154.40.45.121:8080
   不是 https://api.lanxin168.com

4. 构建Debug版本
   使用 assembleDebug（不是Release）

5. 正确的项目位置
   apps/android/  ← 实际项目 ✅
   android-chat-master/  ← 仅参考 ❌

====================================================================
            📊 构建成功标志
====================================================================

✅ 终端显示: BUILD SUCCESSFUL
✅ APK文件存在: apps/android/app/build/outputs/apk/debug/app-debug.apk
✅ 文件大小: 15-30 MB
✅ 无严重编译错误

====================================================================
            📝 需要的环境
====================================================================

必需:
- JDK 17 或更高
- Android SDK
- Gradle（项目自带wrapper）

检查:
java -version  # >= 17
echo $ANDROID_HOME  # 应该有SDK路径

如果缺少，见 DEVIN_BUILD_ANDROID_APK.md 的"问题排查"章节

====================================================================
            🎯 用户将测试的功能
====================================================================

用户安装APK后会测试:
1. 能否登录
2. 单聊是否正常（会话列表、发送消息）
3. 群聊是否正常（创建群、发送群消息）
4. 离线消息是否能拉取
5. 消息是否去重（不重复显示）
6. UI是否流畅，有无崩溃

====================================================================
            预计时间
====================================================================

环境准备: 5分钟（如果环境已有）
删除旧文件: 1分钟
拉取代码: 1分钟
修改配置: 3分钟
构建APK: 3-5分钟
总计: 15-20分钟

====================================================================

准备好了吗？开始吧！

打开: DEVIN_BUILD_ANDROID_APK.md 查看详细步骤

祝顺利！📱

====================================================================

