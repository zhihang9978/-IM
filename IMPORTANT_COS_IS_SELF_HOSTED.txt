═══════════════════════════════════════════════════════════════
  ⚠️ 重要：COS对象存储配置说明
═══════════════════════════════════════════════════════════════

🚨 **关键信息：COS是自建对象存储服务，不是腾讯云COS！**

═══════════════════════════════════════════════════════════════
正确配置 vs 错误配置
═══════════════════════════════════════════════════════════════

✅ **正确配置（自建COS - MinIO）**:
```yaml
storage:
  cos:
    secret_id: "minioadmin"              # MinIO AccessKey
    secret_key: "minioadmin123456"       # MinIO SecretKey
    bucket: "lanxin-files"
    region: "default"
    base_url: "http://localhost:9000"    # MinIO服务地址
```

❌ **错误配置（腾讯云COS - 付费服务）**:
```yaml
tencent_cloud:
  cos:
    secret_id: ""
    secret_key: ""
    bucket: "lanxin-files"
    region: "ap-guangzhou"               # ❌ 腾讯云区域
    base_url: "https://...myqcloud.com"  # ❌ 腾讯云地址
```

═══════════════════════════════════════════════════════════════
为什么必须使用自建COS？
═══════════════════════════════════════════════════════════════

1. **成本控制**
   - 腾讯云COS是付费服务
   - MinIO完全免费开源
   - 节省存储和流量费用

2. **数据自主可控**
   - 数据存储在自己的服务器
   - 不受第三方服务限制
   - 符合企业数据安全要求

3. **灵活性**
   - 可以自由调整存储策略
   - 不受云服务商限制
   - 支持内网部署

═══════════════════════════════════════════════════════════════
给Devin的明确指示
═══════════════════════════════════════════════════════════════

🔧 **立即操作**:

1. 撤销将COS改回腾讯云的配置
2. 使用master分支的配置（已经是自建COS）
3. 部署MinIO服务

📝 **配置文件位置**:
- `apps/backend/config/config.yaml` (✅ master分支已正确)
- `apps/backend/config/config.go` (✅ master分支已正确)

🎯 **代码结构**:
- Config.Storage.COS (✅ 正确)
- Config.TencentCloud.COS (❌ 错误，已删除)

═══════════════════════════════════════════════════════════════
MinIO快速部署（给Devin）
═══════════════════════════════════════════════════════════════

### Docker一键部署:
```bash
docker run -d \
  --name minio \
  -p 9000:9000 \
  -p 9001:9001 \
  -e "MINIO_ROOT_USER=minioadmin" \
  -e "MINIO_ROOT_PASSWORD=minioadmin123456" \
  -v /data/minio:/data \
  --restart=always \
  minio/minio server /data --console-address ":9001"
```

### 验证MinIO运行:
```bash
# 访问MinIO控制台
http://154.40.45.121:9001

# 登录信息
用户名: minioadmin
密码: minioadmin123456
```

### 创建Bucket:
1. 登录MinIO控制台
2. 点击 "Buckets" → "Create Bucket"
3. Bucket名称: `lanxin-files`
4. 访问策略: Private
5. 点击 "Create"

### 配置后端:
```yaml
storage:
  cos:
    secret_id: "minioadmin"
    secret_key: "minioadmin123456"
    bucket: "lanxin-files"
    region: "default"
    base_url: "http://154.40.45.121:9000"  # 使用服务器IP或域名
```

═══════════════════════════════════════════════════════════════
服务分离说明
═══════════════════════════════════════════════════════════════

🎯 **项目中的服务分类**:

**自建服务（完全自主）**:
- ✅ MySQL数据库
- ✅ Redis缓存
- ✅ Kafka消息队列
- ✅ **COS对象存储（MinIO）** ← 自建！
- ✅ Go后端服务
- ✅ React前端
- ✅ Android应用

**第三方服务（仅必要的）**:
- ⚠️ 腾讯云TRTC（音视频通话，无法自建替代）

═══════════════════════════════════════════════════════════════
配置文件对比（Devin请注意）
═══════════════════════════════════════════════════════════════

**当前master分支（正确）**:
```yaml
storage:
  cos:
    base_url: http://localhost:9000  # MinIO
```

**Devin分支（需要修正）**:
```yaml
tencent_cloud:
  cos:
    base_url: https://...myqcloud.com  # ❌ 腾讯云付费
```

**请Devin使用master分支的配置！**

═══════════════════════════════════════════════════════════════
MinIO优势
═══════════════════════════════════════════════════════════════

1. **免费开源** - Apache License 2.0
2. **S3兼容** - 完全兼容AWS S3 API
3. **高性能** - Go语言编写，性能优秀
4. **易部署** - Docker一键启动
5. **企业级** - 支持纠删码、版本控制、加密
6. **可扩展** - 支持分布式集群

═══════════════════════════════════════════════════════════════
部署检查清单（Devin）
═══════════════════════════════════════════════════════════════

□ 在154.40.45.121上部署MinIO（端口9000）
□ 创建lanxin-files Bucket
□ 配置CORS策略（允许跨域上传）
□ 获取AccessKey和SecretKey
□ 更新config.yaml使用MinIO配置
□ 重启后端服务
□ 测试文件上传功能
□ 配置备份服务器的MinIO（可选）

═══════════════════════════════════════════════════════════════
环境变量配置
═══════════════════════════════════════════════════════════════

```bash
# 自建COS（MinIO）
export COS_SECRET_ID="minioadmin"
export COS_SECRET_KEY="minioadmin123456"

# 腾讯云TRTC（仅音视频）
export TRTC_SDK_APP_ID="1600109367"
export TRTC_SECRET_KEY="your_trtc_secret_key"
```

═══════════════════════════════════════════════════════════════
生产环境建议
═══════════════════════════════════════════════════════════════

### MinIO分布式部署（高可用）:
```bash
# 4节点集群
minio server \
  http://154.40.45.121/data{1...4} \
  http://154.40.45.98/data{1...4} \
  http://154.37.212.67/data{1...4} \
  http://154.40.45.xxx/data{1...4}
```

### Nginx反向代理MinIO:
```nginx
upstream minio {
    server 154.40.45.121:9000;
}

server {
    listen 443 ssl;
    server_name files.lanxin168.com;
    
    location / {
        proxy_pass http://minio;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
```

更新base_url为: `https://files.lanxin168.com`

═══════════════════════════════════════════════════════════════
总结
═══════════════════════════════════════════════════════════════

✅ **COS使用自建MinIO服务**
✅ **完全免费，无付费依赖**
✅ **数据自主可控**
✅ **S3协议兼容**

❌ **不使用腾讯云COS**
❌ **避免付费服务**
❌ **避免数据托管第三方**

📌 **Master分支的配置是正确的，Devin请同步使用！**

═══════════════════════════════════════════════════════════════

