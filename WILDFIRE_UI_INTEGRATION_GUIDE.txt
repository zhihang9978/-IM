═══════════════════════════════════════════════════════════════
  野火IM UI集成完整指南 - 给新对话的执行指令
═══════════════════════════════════════════════════════════════

任务: 从野火IM项目中提取UI资源和交互逻辑，集成到蓝信项目
目标: 提升UI质量到商业级，同时保持代码可维护性
原则: 仅提取UI层，保留蓝信的业务逻辑和后端API

═══════════════════════════════════════════════════════════════
📋 执行前准备
═══════════════════════════════════════════════════════════════

确认环境:
  ✅ 野火IM项目已下载到本地
  ✅ 蓝信项目代码在 d:\im-lanxin
  ✅ Android Studio已打开蓝信项目

野火IM项目结构:
  wildfire-im/
  ├── client/             # ⭐ 主要提取这里的UI
  │   ├── src/main/
  │   │   ├── res/
  │   │   │   ├── drawable/      # 图标、背景资源
  │   │   │   ├── layout/        # 布局文件
  │   │   │   ├── values/        # 颜色、尺寸、样式
  │   │   │   └── anim/          # 动画资源
  │   │   └── java/com/alanwang/im/
  │   │       ├── chat/          # 聊天相关
  │   │       ├── conversation/  # 会话列表
  │   │       └── contact/       # 联系人
  └── uikit/              # ⭐ UI组件库

蓝信项目结构:
  im-lanxin/
  └── apps/android/app/src/main/
      ├── res/
      └── java/com/lanxin/im/

═══════════════════════════════════════════════════════════════
🎯 执行步骤（分8个阶段）
═══════════════════════════════════════════════════════════════

阶段1: 分析野火IM的UI结构（30分钟）
阶段2: 提取drawable图标资源（1小时）
阶段3: 提取layout布局文件（2小时）
阶段4: 提取colors和dimens配置（30分钟）
阶段5: 提取聊天气泡组件（1小时）
阶段6: 提取输入框和更多面板（1小时）
阶段7: 适配到蓝信ChatActivity（2小时）
阶段8: 测试和优化（1小时）

总计: 1-2天工作量

═══════════════════════════════════════════════════════════════
📍 阶段1: 分析野火IM的UI结构（必须先做）
═══════════════════════════════════════════════════════════════

任务清单:
  1. 打开野火IM项目，找到聊天界面主要文件
  2. 识别关键的布局文件
  3. 识别关键的drawable资源
  4. 识别颜色和尺寸配置
  5. 创建资源提取清单

需要查看的关键文件（野火IM）:

聊天界面:
  client/src/main/res/layout/conversation_activity.xml
  client/src/main/res/layout/conversation_item_*.xml
  client/src/main/java/.../conversation/ConversationActivity.kt

消息气泡:
  client/src/main/res/layout/conversation_item_text_send.xml
  client/src/main/res/layout/conversation_item_text_receive.xml
  client/src/main/res/layout/conversation_item_image_*.xml
  client/src/main/res/layout/conversation_item_voice_*.xml

输入框:
  client/src/main/res/layout/conversation_input_panel.xml
  
颜色配置:
  client/src/main/res/values/colors.xml
  
图标资源:
  client/src/main/res/drawable/

执行命令（在新对话中）:
```
1. 列出野火IM的布局文件:
   列出目录: wildfire-im/client/src/main/res/layout/

2. 列出野火IM的drawable:
   列出目录: wildfire-im/client/src/main/res/drawable/

3. 读取颜色配置:
   读取文件: wildfire-im/client/src/main/res/values/colors.xml

4. 读取尺寸配置:
   读取文件: wildfire-im/client/src/main/res/values/dimens.xml
```

产出: 创建资源提取清单文档

═══════════════════════════════════════════════════════════════
📍 阶段2: 提取drawable图标资源
═══════════════════════════════════════════════════════════════

需要提取的图标类型:

1. 消息相关图标:
   - ic_chat_*.xml（聊天相关）
   - ic_msg_*.xml（消息类型图标）
   - ic_voice_*.xml（语音播放图标）
   - ic_video_*.xml（视频图标）
   - ic_file_*.xml（文件图标）

2. 输入框图标:
   - ic_emoji.xml（表情）
   - ic_add.xml（更多选项）
   - ic_send.xml（发送按钮）
   - ic_keyboard.xml（键盘切换）

3. 消息气泡背景:
   - bg_message_send.xml（发送气泡）
   - bg_message_receive.xml（接收气泡）
   - bg_message_pressed.xml（按下效果）

4. 按钮和背景:
   - bg_button_*.xml
   - bg_input_*.xml

执行命令（在新对话中）:
```
对于每个需要的图标资源:

1. 从野火IM复制:
   读取文件: wildfire-im/client/src/main/res/drawable/ic_xxx.xml
   
2. 复制到蓝信项目:
   写入文件: apps/android/app/src/main/res/drawable/ic_xxx.xml
   内容: [从野火IM读取的内容]

3. 如果是PNG图片:
   复制文件: wildfire-im/.../ic_xxx.png
   到: apps/android/app/src/main/res/drawable/ic_xxx.png
```

重点提取（优先级排序）:

P0（必须）:
  - bg_message_send.xml（蓝色气泡背景）
  - bg_message_receive.xml（白色气泡背景）
  - ic_voice_*.xml（语音播放图标）
  - ic_emoji.xml（表情图标）

P1（重要）:
  - 所有消息类型图标
  - 输入框相关图标
  - 更多选项图标

P2（优化）:
  - 装饰性图标
  - 状态图标

═══════════════════════════════════════════════════════════════
📍 阶段3: 提取layout布局文件
═══════════════════════════════════════════════════════════════

关键布局文件优先级:

【P0 - 聊天气泡布局】必须提取

野火IM → 蓝信:
  conversation_item_text_send.xml 
    → item_message_text_send_new.xml
  
  conversation_item_text_receive.xml 
    → item_message_text_receive_new.xml
  
  conversation_item_voice_send.xml 
    → item_message_voice_send_new.xml
  
  conversation_item_voice_receive.xml 
    → item_message_voice_receive_new.xml
  
  conversation_item_image_send.xml 
    → item_message_image_send_new.xml
  
  conversation_item_video_send.xml 
    → item_message_video_send_new.xml
  
  conversation_item_file_send.xml 
    → item_message_file_send_new.xml

【P1 - 聊天界面主布局】重要

野火IM → 蓝信:
  conversation_activity.xml 
    → activity_chat_new.xml

【P2 - 输入框和面板】重要

野火IM → 蓝信:
  conversation_input_panel.xml 
    → chat_input_panel.xml
  
  conversation_extension_panel.xml 
    → chat_more_options_new.xml

执行步骤（在新对话中）:

步骤1: 读取野火IM的布局文件
```
读取文件: wildfire-im/client/src/main/res/layout/conversation_item_text_send.xml
```

步骤2: 分析布局结构
- 记录根布局类型
- 记录主要视图组件
- 记录ID命名规范
- 记录尺寸和间距

步骤3: 适配到蓝信项目
- 修改包名引用
- 调整ID命名（保持蓝信风格）
- 保留蓝信的ViewHolder绑定逻辑
- 仅替换UI布局

步骤4: 创建新布局文件
```
写入文件: apps/android/app/src/main/res/layout/item_message_text_send_new.xml
内容: [适配后的布局]
```

重要原则:
  ✅ 保留野火IM的UI设计（视觉）
  ✅ 调整ID以匹配蓝信的ViewHolder
  ✅ 保持dp单位一致性
  ✅ 添加注释说明来源

═══════════════════════════════════════════════════════════════
📍 阶段4: 提取colors和dimens配置
═══════════════════════════════════════════════════════════════

需要提取的配置文件:

1. colors.xml（颜色配置）
   野火IM路径: client/src/main/res/values/colors.xml
   
   重点提取:
   - 主题色（primary）
   - 消息气泡颜色
   - 文字颜色层级
   - 背景颜色
   - 分割线颜色

2. dimens.xml（尺寸配置）
   野火IM路径: client/src/main/res/values/dimens.xml
   
   重点提取:
   - 消息气泡圆角
   - 间距规范（small/medium/large）
   - 字体大小
   - 头像大小
   - 按钮高度

3. styles.xml（样式配置）
   野火IM路径: client/src/main/res/values/styles.xml
   
   重点提取:
   - 消息气泡样式
   - 按钮样式
   - 文字样式

执行方式:
```
1. 读取野火IM的配置:
   读取文件: wildfire-im/client/src/main/res/values/colors.xml

2. 与蓝信当前配置合并:
   读取文件: apps/android/app/src/main/res/values/colors.xml
   
3. 创建新配置（保留蓝信原有 + 添加野火IM优秀部分）:
   更新文件: apps/android/app/src/main/res/values/colors.xml
   策略: 
   - 保留蓝信的primary色（品牌色）
   - 使用野火IM的文字颜色层级
   - 使用野火IM的消息气泡颜色
   - 合并后创建完整配置
```

═══════════════════════════════════════════════════════════════
📍 阶段5: 提取聊天气泡组件
═══════════════════════════════════════════════════════════════

核心组件: 消息气泡ViewHolder

野火IM的实现（参考）:
  TextMessageContentViewHolder.kt
  VoiceMessageContentViewHolder.kt
  ImageMessageContentViewHolder.kt
  VideoMessageContentViewHolder.kt

提取策略:

1. 仅提取UI布局，不提取业务逻辑
2. 保留蓝信的ChatAdapter架构
3. 更新ViewHolder中的findViewById ID
4. 保留蓝信的数据模型（Message）
5. 保留蓝信的API调用逻辑

具体执行:
```
1. 读取野火IM的ViewHolder实现:
   读取文件: wildfire-im/.../TextMessageContentViewHolder.kt
   
2. 分析其UI绑定逻辑:
   - 找到所有findViewById
   - 找到UI更新代码
   - 记录交互事件（点击、长按）

3. 更新蓝信的ViewHolder:
   文件: apps/android/app/src/main/java/com/lanxin/im/ui/chat/ChatAdapter.kt
   
   保留:
   - 蓝信的数据模型（Message）
   - 蓝信的回调机制
   - 蓝信的API调用
   
   替换:
   - findViewById的ID（使用新布局的ID）
   - UI展示逻辑（使用野火IM的精美展示）
   - 添加野火IM的细节（如状态图标、时间格式）
```

═══════════════════════════════════════════════════════════════
📍 阶段6: 提取输入框和更多面板
═══════════════════════════════════════════════════════════════

关键UI组件:

1. 输入框面板
   野火IM: conversation_input_panel.xml
   蓝信新建: chat_input_panel_new.xml
   
   包含:
   - 语音/文本切换按钮
   - 输入框
   - 表情按钮
   - 更多选项按钮
   - 发送按钮

2. 更多选项面板
   野火IM: conversation_extension_panel.xml
   蓝信新建: dialog_more_options_new.xml
   
   包含:
   - 相册、拍照、视频
   - 文件、位置、名片
   - 网格布局（通常2x4或3x3）

3. 表情面板（如果有）
   野火IM: emoji_panel.xml
   蓝信新建: emoji_panel.xml

执行重点:
  - 保持野火IM的视觉设计
  - 调整为蓝信的功能（8个选项）
  - 使用蓝信的点击事件逻辑

═══════════════════════════════════════════════════════════════
📍 阶段7: 适配到ChatActivity
═══════════════════════════════════════════════════════════════

核心文件修改:

【文件1】activity_chat.xml
  操作: 替换整个布局
  策略:
  1. 使用野火IM的conversation_activity.xml作为基础
  2. 保留蓝信的ID命名
  3. 调整视图引用
  4. 测试布局预览

【文件2】ChatAdapter.kt
  操作: 更新ViewHolder
  策略:
  1. 保留蓝信的ViewHolder类结构
  2. 更新findViewById使用新布局的ID
  3. 增强UI展示逻辑（参考野火IM）
  4. 保留所有业务逻辑和回调

【文件3】ChatActivity.kt
  操作: 更新视图初始化
  策略:
  1. 更新findViewById使用新布局的ID
  2. 保留所有业务逻辑
  3. 保留所有API调用
  4. 仅调整UI相关代码

示例代码结构:
```kotlin
// ChatAdapter.kt - 保留结构，更新UI
class SentMessageViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
    // ✅ 保留：蓝信的数据绑定逻辑
    // ✅ 更新：使用新布局的ID
    private val tvContent: TextView = itemView.findViewById(R.id.tv_message_content) // 新ID
    private val tvTime: TextView = itemView.findViewById(R.id.tv_message_time) // 新ID
    
    fun bind(message: Message, onLongClick: (Message) -> Unit) {
        // ✅ 保留：蓝信的业务逻辑
        tvContent.text = message.content
        // ✅ 增强：野火IM的UI效果
        // 例如：添加已读状态图标、优化时间显示等
    }
}
```

═══════════════════════════════════════════════════════════════
📍 阶段8: 测试和优化
═══════════════════════════════════════════════════════════════

测试清单:
  1. ✅ 布局预览正常
  2. ✅ 编译通过无错误
  3. ✅ 所有消息类型显示正常
  4. ✅ 点击和长按事件正常
  5. ✅ 颜色和间距协调
  6. ✅ 动画效果流畅

优化项:
  1. 调整颜色适配蓝信品牌
  2. 优化间距和字体
  3. 添加缺失的动画
  4. 性能优化

═══════════════════════════════════════════════════════════════
🔑 关键原则（必须遵守）
═══════════════════════════════════════════════════════════════

原则1: 仅提取UI层
  ✅ 提取：layout、drawable、values
  ❌ 不提取：业务逻辑代码
  ❌ 不提取：网络层、数据库层

原则2: 保留蓝信的架构
  ✅ 保留：ChatActivity、ChatAdapter结构
  ✅ 保留：Message数据模型
  ✅ 保留：RetrofitClient API调用
  ✅ 保留：所有业务逻辑

原则3: 保持可维护性
  ✅ 添加注释：标注来源于野火IM
  ✅ 保持命名：使用蓝信的命名规范
  ✅ 文档记录：记录所有提取的资源

原则4: 渐进式替换
  ✅ 先创建新布局（*_new.xml）
  ✅ 测试通过后再替换旧布局
  ✅ 保留备份，随时可回滚

原则5: 品牌一致性
  ✅ 保留蓝信的品牌色
  ✅ 保留蓝信的应用名称
  ✅ 调整野火IM的UI适配蓝信风格

═══════════════════════════════════════════════════════════════
📝 详细执行脚本（给新对话）
═══════════════════════════════════════════════════════════════

【执行脚本 - 阶段1】

请执行以下命令分析野火IM结构:

1. 列出野火IM的聊天相关布局文件:
   list_dir: [野火IM路径]/client/src/main/res/layout/
   
2. 筛选出消息气泡布局:
   grep: "conversation_item" in layout目录
   
3. 读取关键布局文件:
   read_file: [野火IM路径]/client/src/main/res/layout/conversation_item_text_send.xml
   read_file: [野火IM路径]/client/src/main/res/layout/conversation_item_text_receive.xml
   read_file: [野火IM路径]/client/src/main/res/layout/conversation_activity.xml
   
4. 读取颜色配置:
   read_file: [野火IM路径]/client/src/main/res/values/colors.xml
   
5. 读取尺寸配置:
   read_file: [野火IM路径]/client/src/main/res/values/dimens.xml

6. 创建资源提取清单:
   基于读取的文件，创建一个清单列出所有需要提取的资源

【执行脚本 - 阶段2】

提取drawable资源:

1. 列出所有需要的图标:
   list_dir: [野火IM路径]/client/src/main/res/drawable/
   
2. 筛选聊天相关图标:
   grep: "ic_msg|ic_voice|ic_chat|bg_message" in drawable
   
3. 逐个复制到蓝信项目:
   对于每个图标文件:
   - 读取野火IM的文件
   - 写入到蓝信对应位置
   - 保持文件名或适当重命名

【执行脚本 - 阶段3】

提取和适配布局文件:

1. 提取发送消息气泡:
   read_file: [野火IM]/res/layout/conversation_item_text_send.xml
   
   分析和修改:
   - 记录所有android:id
   - 记录布局结构
   - 调整ID为蓝信命名风格
   
   写入新文件:
   write: apps/android/app/src/main/res/layout/item_message_sent_new.xml

2. 提取接收消息气泡:
   read_file: [野火IM]/res/layout/conversation_item_text_receive.xml
   
   写入新文件:
   write: apps/android/app/src/main/res/layout/item_message_received_new.xml

3. 重复以上步骤，提取所有消息类型布局

【执行脚本 - 阶段4】

更新ChatAdapter使用新布局:

1. 读取当前ChatAdapter:
   read_file: apps/android/app/src/main/java/com/lanxin/im/ui/chat/ChatAdapter.kt
   
2. 更新onCreateViewHolder:
   修改: R.layout.item_message_sent → R.layout.item_message_sent_new
   
3. 更新ViewHolder的findViewById:
   修改ID以匹配新布局

4. 测试编译

【执行脚本 - 阶段5】

更新ChatActivity:

1. 读取当前ChatActivity布局:
   read_file: apps/android/app/src/main/res/layout/activity_chat.xml
   
2. 参考野火IM布局创建新版本:
   write: apps/android/app/src/main/res/layout/activity_chat_new.xml
   
3. 更新ChatActivity.kt引用新布局:
   修改: setContentView(R.layout.activity_chat_new)
   
4. 更新所有findViewById

═══════════════════════════════════════════════════════════════
🎨 UI提取优先级和时间分配
═══════════════════════════════════════════════════════════════

第1天上午（4小时）- 核心消息气泡:
  ✅ 提取文本消息气泡（发送/接收）
  ✅ 提取背景drawable
  ✅ 提取颜色配置
  ✅ 更新ChatAdapter使用新布局
  ✅ 测试编译和预览

第1天下午（4小时）- 其他消息类型:
  ✅ 提取语音消息气泡
  ✅ 提取图片消息气泡
  ✅ 提取视频消息气泡
  ✅ 提取文件消息气泡
  ✅ 更新ChatAdapter所有ViewHolder

第2天上午（4小时）- 输入框和面板:
  ✅ 提取输入框面板布局
  ✅ 提取更多选项面板
  ✅ 提取图标资源
  ✅ 更新ChatActivity输入框部分

第2天下午（4小时）- 测试和优化:
  ✅ 完整测试所有消息类型
  ✅ 调整颜色和间距
  ✅ 修复布局问题
  ✅ 性能优化
  ✅ 文档更新

═══════════════════════════════════════════════════════════════
📦 需要提取的文件清单（具体列表）
═══════════════════════════════════════════════════════════════

【Drawable资源】约30-50个文件

消息相关:
  - bg_message_send.xml（蓝色气泡）
  - bg_message_receive.xml（白色气泡）
  - bg_message_pressed.xml（按下效果）
  - ic_voice_play_3.xml（语音播放动画）
  - ic_msg_send_status_*.xml（发送状态图标）

输入框相关:
  - ic_emoji.xml
  - ic_add.xml
  - ic_keyboard.xml
  - bg_input_normal.xml
  - bg_input_focused.xml

更多选项:
  - ic_func_pic.xml（相册）
  - ic_func_camera.xml（拍照）
  - ic_func_video.xml（视频）
  - ic_func_file.xml（文件）
  - ic_func_location.xml（位置）

【Layout资源】约15-20个文件

消息气泡:
  - item_message_sent_new.xml
  - item_message_received_new.xml
  - item_message_voice_sent_new.xml
  - item_message_voice_received_new.xml
  - item_message_image_sent_new.xml
  - item_message_video_sent_new.xml
  - item_message_file_sent_new.xml

主界面:
  - activity_chat_new.xml

输入和面板:
  - chat_input_panel.xml
  - dialog_more_options_new.xml

【Values资源】3个文件

  - colors.xml（合并）
  - dimens.xml（合并）
  - styles.xml（选择性添加）

═══════════════════════════════════════════════════════════════
⚠️ 重要注意事项
═══════════════════════════════════════════════════════════════

1. 版权和授权:
   - 野火IM使用Apache 2.0许可证
   - ✅ 允许商业使用
   - ✅ 允许修改
   - ⚠️ 需要保留版权声明
   - ⚠️ 建议在代码中注释来源

   示例注释:
   ```xml
   <!-- 
     此布局参考野火IM (WildFireChat) 
     https://github.com/wildfirechat/android-chat
     License: Apache 2.0
     已根据蓝信项目需求进行适配
   -->
   ```

2. 品牌调整:
   - 替换所有"野火"文字为"蓝信"
   - 调整品牌色为蓝信的主题色
   - 使用蓝信的应用图标

3. 功能适配:
   - 野火IM可能有你没有的功能（忽略）
   - 你有的功能野火IM可能没有（保留你的实现）
   - 仅提取UI，不改变功能

4. 保持可维护性:
   - 清晰的注释
   - 统一的命名规范
   - 文档记录所有修改

═══════════════════════════════════════════════════════════════
📋 给新对话的执行指令（复制粘贴）
═══════════════════════════════════════════════════════════════

任务：从野火IM项目提取UI资源并集成到蓝信Android项目

背景：
- 蓝信项目位置：d:\im-lanxin\apps\android
- 野火IM已下载到本地（请告知具体路径）
- 目标：提升UI质量，保持代码可维护性

执行步骤：

阶段1：分析野火IM结构（30分钟）
  1. 列出野火IM的layout目录，找到聊天相关布局
  2. 读取关键布局文件（消息气泡、聊天界面、输入框）
  3. 读取colors.xml和dimens.xml
  4. 创建资源提取清单

阶段2：提取drawable资源（1小时）
  1. 列出野火IM的drawable目录
  2. 筛选聊天相关图标（ic_msg*, bg_message*, ic_voice*等）
  3. 逐个复制到蓝信项目的drawable目录
  4. 验证资源引用正确

阶段3：提取layout布局（2小时）
  1. 提取消息气泡布局（发送/接收，6种消息类型）
  2. 适配布局ID为蓝信命名规范
  3. 保留野火IM的视觉设计
  4. 创建新布局文件（*_new.xml）

阶段4：提取配置文件（30分钟）
  1. 合并colors.xml（保留蓝信品牌色，添加野火IM的优秀配色）
  2. 合并dimens.xml（使用野火IM的间距规范）
  3. 选择性提取styles.xml

阶段5：更新ChatAdapter（1小时）
  1. 读取当前ChatAdapter.kt
  2. 更新ViewHolder使用新布局
  3. 更新findViewById使用新布局的ID
  4. 保留所有业务逻辑和回调
  5. 测试编译

阶段6：更新ChatActivity（1小时）
  1. 创建新的activity_chat布局（参考野火IM）
  2. 更新ChatActivity.kt使用新布局
  3. 更新所有findViewById
  4. 保留所有业务逻辑
  5. 测试编译

阶段7：提取输入框和更多面板（1小时）
  1. 提取野火IM的输入框布局
  2. 提取更多选项面板布局
  3. 适配到蓝信的8个选项
  4. 更新相关点击事件

阶段8：测试和优化（1小时）
  1. 运行应用测试所有UI
  2. 调整颜色和间距
  3. 修复布局问题
  4. 添加必要注释
  5. 创建UI更新文档

关键原则：
  ✅ 仅提取UI资源（layout、drawable、values）
  ✅ 保留蓝信的所有业务逻辑代码
  ✅ 保留蓝信的API调用和数据模型
  ✅ 添加注释标注来源（Apache 2.0 License）
  ✅ 保持代码可维护性

输出要求：
  1. 每完成一个阶段就提交一次Git
  2. 提交消息格式：UI: Extract [资源类型] from WildFireChat
  3. 创建UI_INTEGRATION_LOG.txt记录所有提取的资源
  4. 最终创建UI_UPDATE_SUMMARY.txt总结改进效果

预计完成时间：1-2天
预期效果：UI质量提升70-80%

请从阶段1开始执行，逐步完成所有阶段。

═══════════════════════════════════════════════════════════════

