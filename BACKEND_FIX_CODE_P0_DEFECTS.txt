═══════════════════════════════════════════════════════════════
  后端P0级缺陷修复代码 - 立即实施
═══════════════════════════════════════════════════════════════

修复优先级: ⛔ P0 - 阻塞核心功能
预计修复时间: 1天 (8小时)

═══════════════════════════════════════════════════════════════
【P0-1】添加历史消息API
═══════════════════════════════════════════════════════════════

文件: apps/backend/internal/dao/message_dao.go
添加方法:
```go
// GetHistoryMessages 获取历史消息（分页）
func (d *MessageDAO) GetHistoryMessages(conversationID, beforeMessageID uint, limit int) ([]model.Message, error) {
	var messages []model.Message
	
	query := d.db.Where("conversation_id = ?", conversationID)
	
	// 如果指定了beforeMessageID，只获取更早的消息
	if beforeMessageID > 0 {
		query = query.Where("id < ?", beforeMessageID)
	}
	
	err := query.
		Order("id DESC").
		Limit(limit).
		Preload("Sender").
		Preload("Receiver").
		Find(&messages).Error
		
	if err != nil {
		return nil, err
	}
	
	// 反转顺序，使最早的在前面
	for i, j := 0, len(messages)-1; i < j; i, j = i+1, j-1 {
		messages[i], messages[j] = messages[j], messages[i]
	}
	
	return messages, nil
}
```

文件: apps/backend/internal/service/message_service.go
添加方法:
```go
// GetHistoryMessages 获取历史消息
func (s *MessageService) GetHistoryMessages(conversationID, beforeMessageID uint, limit int) ([]model.Message, error) {
	return s.messageDAO.GetHistoryMessages(conversationID, beforeMessageID, limit)
}
```

文件: apps/backend/internal/api/message.go
添加方法:
```go
// GetHistoryMessages 获取历史消息
func (h *MessageHandler) GetHistoryMessages(c *gin.Context) {
	conversationID, _ := strconv.ParseUint(c.Param("id"), 10, 32)
	beforeMessageID, _ := strconv.ParseUint(c.Query("before_message_id"), 10, 32)
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))
	
	messages, err := h.messageService.GetHistoryMessages(
		uint(conversationID),
		uint(beforeMessageID),
		limit,
	)
	
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"code":    500,
			"message": err.Error(),
			"data":    nil,
		})
		return
	}
	
	c.JSON(http.StatusOK, gin.H{
		"code":    0,
		"message": "success",
		"data": gin.H{
			"total":    len(messages),
			"messages": messages,
		},
	})
}
```

文件: apps/backend/cmd/server/main.go
添加路由 (line 130后):
```go
authorized.GET("/conversations/:id/messages/history", messageHandler.GetHistoryMessages)
```

═══════════════════════════════════════════════════════════════
【P0-2】完善会话列表数据
═══════════════════════════════════════════════════════════════

文件: apps/backend/internal/dao/conversation_dao.go
修改方法:
```go
// GetUserConversations 获取用户的会话列表（含关联数据）
func (d *ConversationDAO) GetUserConversations(userID uint) ([]model.Conversation, error) {
	var conversations []model.Conversation
	
	err := d.db.
		Where("user1_id = ? OR user2_id = ?", userID, userID).
		Preload("User1").         // ✅ 添加User1关联
		Preload("User2").         // ✅ 添加User2关联
		Preload("LastMessage").   // ✅ 添加LastMessage关联
		Order("updated_at DESC").
		Find(&conversations).Error
		
	return conversations, err
}

// GetUnreadCount 获取会话未读消息数
func (d *ConversationDAO) GetUnreadCount(conversationID, userID uint) int {
	var count int64
	
	d.db.Model(&model.Message{}).
		Where("conversation_id = ? AND receiver_id = ? AND status != ?", 
			conversationID, userID, model.MessageStatusRead).
		Count(&count)
		
	return int(count)
}
```

文件: apps/backend/internal/api/conversation.go
修改方法:
```go
// GetConversations 获取用户的会话列表
func (h *ConversationHandler) GetConversations(c *gin.Context) {
	userID, _ := middleware.GetUserID(c)

	conversations, err := h.conversationDAO.GetUserConversations(userID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"code":    500,
			"message": err.Error(),
			"data":    nil,
		})
		return
	}

	// 转换为响应格式
	items := make([]map[string]interface{}, len(conversations))
	for i, conv := range conversations {
		// 计算真实未读数 ✅
		unreadCount := h.conversationDAO.GetUnreadCount(conv.ID, userID)
		
		item := map[string]interface{}{
			"id":            conv.ID,
			"type":          conv.Type,
			"unread_count":  unreadCount,      // ✅ 真实计算
			"updated_at":    conv.UpdatedAt.Unix(),
			"last_message":  conv.LastMessage,  // ✅ 包含最后消息
		}
		
		// 添加对方用户信息
		if conv.Type == "single" {
			if conv.User1ID != nil && *conv.User1ID != userID {
				item["user"] = conv.User1
			} else if conv.User2ID != nil {
				item["user"] = conv.User2
			}
		}
		
		items[i] = item
	}

	c.JSON(http.StatusOK, gin.H{
		"code":    0,
		"message": "success",
		"data": gin.H{
			"conversations": items,
		},
	})
}
```

═══════════════════════════════════════════════════════════════
【P0-3】修复数据类型不一致
═══════════════════════════════════════════════════════════════

说明: 这个修复需要全局修改，建议统一为uint64

文件: apps/backend/internal/model/*.go (所有模型)
全局替换:
```go
// 修改前
type Contact struct {
    ID        uint      `gorm:"primarykey" json:"id"`
    UserID    uint      `gorm:"not null;index" json:"user_id"`
    ContactID uint      `gorm:"not null;index" json:"contact_id"`
}

// 修改后
type Contact struct {
    ID        uint64    `gorm:"primarykey" json:"id"`
    UserID    uint64    `gorm:"not null;index" json:"user_id"`
    ContactID uint64    `gorm:"not null;index" json:"contact_id"`
}
```

需要修改的文件:
- internal/model/user.go
- internal/model/message.go
- internal/model/contact.go
- internal/model/conversation.go
- internal/model/group.go

影响: 需要重新迁移数据库
建议: 下次版本修改，当前版本容忍

═══════════════════════════════════════════════════════════════
【P1-1】添加联系人管理API
═══════════════════════════════════════════════════════════════

文件: apps/backend/internal/dao/contact_dao.go
添加方法:
```go
// Delete 删除联系人
func (d *ContactDAO) Delete(id, userID uint) error {
	return d.db.Where("id = ? AND user_id = ?", id, userID).
		Delete(&model.Contact{}).Error
}

// UpdateRemark 更新备注和标签
func (d *ContactDAO) UpdateRemark(contactID, userID uint, remark, tags string) error {
	return d.db.Model(&model.Contact{}).
		Where("id = ? AND user_id = ?", contactID, userID).
		Updates(map[string]interface{}{
			"remark": remark,
			"tags":   tags,
		}).Error
}
```

文件: apps/backend/internal/api/contact.go
添加方法:
```go
// AddContact 添加联系人
func (h *ContactHandler) AddContact(c *gin.Context) {
	userID, _ := middleware.GetUserID(c)
	
	var req struct {
		ContactID uint   `json:"contact_id" binding:"required"`
		Remark    string `json:"remark"`
		Tags      string `json:"tags"`
	}
	
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"code":    400,
			"message": "Invalid request",
			"data":    nil,
		})
		return
	}
	
	contact := &model.Contact{
		UserID:    userID,
		ContactID: req.ContactID,
		Remark:    req.Remark,
		Tags:      req.Tags,
		Status:    model.ContactStatusNormal,
	}
	
	if err := h.contactDAO.Create(contact); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"code":    500,
			"message": err.Error(),
			"data":    nil,
		})
		return
	}
	
	c.JSON(http.StatusOK, gin.H{
		"code":    0,
		"message": "success",
		"data": gin.H{
			"contact": contact,
		},
	})
}

// DeleteContact 删除联系人
func (h *ContactHandler) DeleteContact(c *gin.Context) {
	userID, _ := middleware.GetUserID(c)
	contactID, _ := strconv.ParseUint(c.Param("id"), 10, 32)
	
	if err := h.contactDAO.Delete(uint(contactID), userID); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"code":    500,
			"message": err.Error(),
			"data":    nil,
		})
		return
	}
	
	c.JSON(http.StatusOK, gin.H{
		"code":    0,
		"message": "success",
		"data":    nil,
	})
}

// UpdateRemark 更新联系人备注
func (h *ContactHandler) UpdateRemark(c *gin.Context) {
	userID, _ := middleware.GetUserID(c)
	contactID, _ := strconv.ParseUint(c.Param("id"), 10, 32)
	
	var req struct {
		Remark string `json:"remark"`
		Tags   string `json:"tags"`
	}
	
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"code":    400,
			"message": "Invalid request",
			"data":    nil,
		})
		return
	}
	
	if err := h.contactDAO.UpdateRemark(uint(contactID), userID, req.Remark, req.Tags); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"code":    500,
			"message": err.Error(),
			"data":    nil,
		})
		return
	}
	
	c.JSON(http.StatusOK, gin.H{
		"code":    0,
		"message": "success",
		"data":    nil,
	})
}
```

文件: apps/backend/cmd/server/main.go
添加路由 (line 124后):
```go
authorized.POST("/contacts", contactHandler.AddContact)
authorized.DELETE("/contacts/:id", contactHandler.DeleteContact)
authorized.PUT("/contacts/:id/remark", contactHandler.UpdateRemark)
```

═══════════════════════════════════════════════════════════════
【P1-2】修复Preload缺失
═══════════════════════════════════════════════════════════════

文件: apps/backend/internal/dao/contact_dao.go
修改:
```go
// GetUserContacts 获取用户的所有联系人（含关联数据）
func (d *ContactDAO) GetUserContacts(userID uint) ([]model.Contact, error) {
	var contacts []model.Contact
	err := d.db.Where("user_id = ?", userID).
		Preload("ContactUser").  // ✅ 确保加载
		Order("created_at DESC").
		Find(&contacts).Error
	return contacts, err
}
```

═══════════════════════════════════════════════════════════════
【P1-3】添加密码修改API
═══════════════════════════════════════════════════════════════

文件: apps/backend/internal/api/user.go
添加方法:
```go
// ChangePassword 修改密码
func (h *UserHandler) ChangePassword(c *gin.Context) {
	userID, _ := middleware.GetUserID(c)
	
	var req struct {
		OldPassword string `json:"old_password" binding:"required"`
		NewPassword string `json:"new_password" binding:"required"`
	}
	
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"code":    400,
			"message": "Invalid request",
			"data":    nil,
		})
		return
	}
	
	// 验证旧密码
	user, err := h.userDAO.GetByID(userID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"code":    404,
			"message": "User not found",
			"data":    nil,
		})
		return
	}
	
	if !checkPasswordHash(req.OldPassword, user.Password) {
		c.JSON(http.StatusUnauthorized, gin.H{
			"code":    401,
			"message": "Old password incorrect",
			"data":    nil,
		})
		return
	}
	
	// 更新密码
	hashedPassword, _ := hashPassword(req.NewPassword)
	if err := h.userDAO.UpdatePassword(userID, hashedPassword); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"code":    500,
			"message": err.Error(),
			"data":    nil,
		})
		return
	}
	
	c.JSON(http.StatusOK, gin.H{
		"code":    0,
		"message": "Password changed successfully",
		"data":    nil,
	})
}
```

文件: apps/backend/internal/dao/user_dao.go
添加方法:
```go
// UpdatePassword 更新用户密码
func (d *UserDAO) UpdatePassword(userID uint, hashedPassword string) error {
	return d.db.Model(&model.User{}).
		Where("id = ?", userID).
		Update("password", hashedPassword).Error
}
```

文件: apps/backend/cmd/server/main.go
添加路由 (line 117后):
```go
authorized.PUT("/users/me/password", userHandler.ChangePassword)
```

═══════════════════════════════════════════════════════════════
【P1-4】完善未读计数
═══════════════════════════════════════════════════════════════

文件: apps/backend/internal/dao/conversation_dao.go
添加方法:
```go
// GetUnreadCount 计算会话未读消息数
func (d *ConversationDAO) GetUnreadCount(conversationID, userID uint) int {
	var count int64
	
	d.db.Model(&model.Message{}).
		Where("conversation_id = ? AND receiver_id = ? AND status != ?", 
			conversationID, userID, model.MessageStatusRead).
		Count(&count)
		
	return int(count)
}
```

在GetConversations中调用:
```go
unreadCount := h.conversationDAO.GetUnreadCount(conv.ID, userID)
item["unread_count"] = unreadCount  // ✅ 真实值
```

═══════════════════════════════════════════════════════════════
修复验证清单
═══════════════════════════════════════════════════════════════

修复后测试:
[ ] 测试下拉加载历史消息
[ ] 测试会话列表显示消息预览
[ ] 测试会话列表显示未读数
[ ] 测试添加联系人
[ ] 测试删除联系人
[ ] 测试修改密码
[ ] 测试设置备注

预期结果:
- 历史消息可加载 ✅
- 会话列表显示完整 ✅
- 联系人可管理 ✅
- 密码可修改 ✅

修复后可用度: 75% → 90%

═══════════════════════════════════════════════════════════════


