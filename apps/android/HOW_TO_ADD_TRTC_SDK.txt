═══════════════════════════════════════════════════════════════
  如何添加腾讯云TRTC SDK到Android项目
═══════════════════════════════════════════════════════════════

重要说明：
- 蓝信通讯仅使用腾讯云TRTC（音视频通话）
- 不使用腾讯云COS（使用自建MinIO）

═══════════════════════════════════════════════════════════════
方法1：通过Maven仓库（推荐）
═══════════════════════════════════════════════════════════════

1. 在 build.gradle.kts 中取消注释TRTC依赖：
   
   implementation("com.tencent.liteav:LiteAVSDK_TRTC:11.5.0")

2. 同步Gradle

3. 如果同步失败，检查网络或使用国内镜像：
   
   repositories {
       maven { url = uri("https://mirrors.tencent.com/nexus/repository/maven-public/") }
   }

═══════════════════════════════════════════════════════════════
方法2：手动添加AAR文件
═══════════════════════════════════════════════════════════════

1. 从腾讯云官方下载TRTC SDK：
   https://cloud.tencent.com/document/product/647/32689

2. 下载完整包或精简版（推荐精简版）

3. 解压后，将AAR文件复制到项目：
   mkdir -p apps/android/app/libs
   cp LiteAVSDK_TRTC_*.aar apps/android/app/libs/

4. 在 build.gradle.kts 中添加本地依赖：
   
   dependencies {
       implementation(files("libs/LiteAVSDK_TRTC_11.5.0.aar"))
   }

5. 同步Gradle

═══════════════════════════════════════════════════════════════
添加SDK后需要做的事
═══════════════════════════════════════════════════════════════

1. 在 AndroidManifest.xml 中取消注释TRTC相关Activity：
   
   删除 <!-- 和 --> 注释标记

2. 验证TRTC导入：
   
   在TRTCManager.kt中导入应该正常：
   import com.tencent.trtc.TRTCCloud
   import com.tencent.trtc.TRTCCloudDef

3. 编译项目：
   
   ./gradlew assembleDebug

4. 如果编译成功，可以打包Release版本：
   
   ./gradlew assembleRelease

═══════════════════════════════════════════════════════════════
不添加TRTC SDK的编译方案（临时）
═══════════════════════════════════════════════════════════════

如果暂时不需要音视频功能，可以临时移除TRTC相关代码：

1. 重命名trtc目录：
   mv apps/android/app/src/main/java/com/lanxin/im/trtc apps/android/app/src/main/java/com/lanxin/im/trtc.bak

2. 这样可以让项目正常编译，但不包含音视频功能

3. 后续添加TRTC SDK后，再恢复目录名

═══════════════════════════════════════════════════════════════
MinIO客户端说明
═══════════════════════════════════════════════════════════════

✅ 项目已正确配置MinIO Java客户端：

dependencies {
    implementation("io.minio:minio:8.5.7")
}

使用方式：
  MinioClient minioClient = MinioClient.builder()
      .endpoint("http://154.40.45.121:9000")
      .credentials("minioadmin", "minioadmin123456")
      .build();

注意：不需要腾讯云COS SDK！

═══════════════════════════════════════════════════════════════
推荐的APK打包方案（给Devin）
═══════════════════════════════════════════════════════════════

方案A：包含TRTC SDK（完整版）
  1. 添加TRTC SDK（方法1或方法2）
  2. 取消注释AndroidManifest.xml中的Activity
  3. 编译打包
  
  优点：功能完整，包含音视频通话
  缺点：需要添加SDK，APK体积较大（约50MB）

方案B：不包含TRTC（简化版）⭐ 推荐先用这个
  1. 保持TRTC依赖注释状态
  2. 保持AndroidManifest.xml中Activity注释
  3. 移除或注释trtc目录代码
  4. 直接编译打包
  
  优点：快速打包，APK体积小（约20MB）
  缺点：暂无音视频功能（后续可添加）

推荐：先用方案B快速打包一个可用版本，然后再添加TRTC做完整版。

═══════════════════════════════════════════════════════════════
快速打包命令（方案B）
═══════════════════════════════════════════════════════════════

cd apps/android

# 如果trtc目录导致编译错误，临时重命名
mv app/src/main/java/com/lanxin/im/trtc app/src/main/java/com/lanxin/im/trtc.bak

# 编译
./gradlew assembleRelease

# 签名后的APK位置
# app/build/outputs/apk/release/app-release.apk

═══════════════════════════════════════════════════════════════

