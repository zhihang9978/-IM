═══════════════════════════════════════════════════════════════
  自建COS对象存储部署指南
═══════════════════════════════════════════════════════════════

重要提示：蓝信通讯使用自建对象存储服务，不是腾讯云COS。
推荐使用MinIO作为S3兼容的对象存储解决方案。

═══════════════════════════════════════════════════════════════
一、MinIO部署方式
═══════════════════════════════════════════════════════════════

### 方式1：Docker部署（推荐开发环境）

docker run -d \
  --name minio \
  -p 9000:9000 \
  -p 9001:9001 \
  -e "MINIO_ROOT_USER=minioadmin" \
  -e "MINIO_ROOT_PASSWORD=minioadmin123456" \
  -v /data/minio:/data \
  minio/minio server /data --console-address ":9001"

### 方式2：二进制部署（生产环境）

1. 下载MinIO
   wget https://dl.min.io/server/minio/release/linux-amd64/minio
   chmod +x minio

2. 启动服务
   MINIO_ROOT_USER=admin MINIO_ROOT_PASSWORD=password \
   ./minio server /data --console-address ":9001"

3. 设置为系统服务（可选）
   创建systemd服务文件

═══════════════════════════════════════════════════════════════
二、MinIO配置
═══════════════════════════════════════════════════════════════

1. 访问MinIO控制台
   http://your-server:9001
   
2. 登录
   用户名: minioadmin（或自定义）
   密码: minioadmin123456

3. 创建Bucket
   - Bucket名称: lanxin-files
   - 访问策略: Private
   - 版本控制: 启用（可选）

4. 创建访问密钥
   - 进入 Access Keys 页面
   - 点击 Create access key
   - 保存 Access Key 和 Secret Key
   - 在后端配置中使用

═══════════════════════════════════════════════════════════════
三、CORS配置
═══════════════════════════════════════════════════════════════

在MinIO中为Bucket配置CORS：

{
  "CORSRules": [
    {
      "AllowedOrigins": ["*"],
      "AllowedMethods": ["GET", "PUT", "POST", "DELETE"],
      "AllowedHeaders": ["*"],
      "ExposeHeaders": ["ETag"],
      "MaxAgeSeconds": 3000
    }
  ]
}

使用mc命令行工具配置：
mc cors set lanxin-files/lanxin-files cors.json

═══════════════════════════════════════════════════════════════
四、后端配置
═══════════════════════════════════════════════════════════════

更新 apps/backend/config/config.yaml：

storage:
  cos:
    secret_id: "YOUR_MINIO_ACCESS_KEY"
    secret_key: "YOUR_MINIO_SECRET_KEY"
    bucket: "lanxin-files"
    region: "default"
    base_url: "http://localhost:9000"

或设置环境变量：
export COS_SECRET_ID="YOUR_MINIO_ACCESS_KEY"
export COS_SECRET_KEY="YOUR_MINIO_SECRET_KEY"

═══════════════════════════════════════════════════════════════
五、测试上传
═══════════════════════════════════════════════════════════════

使用curl测试：

1. 获取上传凭证
   curl -X GET "http://localhost:8080/api/v1/files/upload-token?file_name=test.jpg&file_type=image" \
     -H "Authorization: Bearer YOUR_JWT_TOKEN"

2. 使用返回的凭证上传文件

═══════════════════════════════════════════════════════════════
六、高可用部署（生产环境）
═══════════════════════════════════════════════════════════════

MinIO支持分布式部署：

# 4节点集群（至少4个节点）
minio server \
  http://server1/data \
  http://server2/data \
  http://server3/data \
  http://server4/data

优势：
- 数据冗余
- 故障自动恢复
- 横向扩展
- 高可用性

═══════════════════════════════════════════════════════════════
七、与S3兼容性
═══════════════════════════════════════════════════════════════

MinIO完全兼容Amazon S3 API，可以：
- 使用AWS SDK访问
- 使用s3cmd工具管理
- 无缝迁移到AWS S3
- 支持S3生态工具

═══════════════════════════════════════════════════════════════
八、监控和维护
═══════════════════════════════════════════════════════════════

1. 查看存储使用情况
   mc admin info minio

2. 监控性能
   MinIO控制台提供实时监控

3. 备份策略
   - 配置版本控制
   - 定期备份数据目录
   - 使用mc mirror命令同步

═══════════════════════════════════════════════════════════════
九、安全建议
═══════════════════════════════════════════════════════════════

1. 修改默认密码
2. 启用HTTPS（TLS证书）
3. 配置防火墙规则
4. 定期轮换访问密钥
5. 启用访问日志审计

═══════════════════════════════════════════════════════════════

**总结**: 
- COS是自建服务，推荐使用MinIO
- 数据完全自主可控
- 支持S3标准协议
- 易于部署和维护

Devin部署时请参考本文档配置自建COS服务。

═══════════════════════════════════════════════════════════════

