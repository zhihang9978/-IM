═══════════════════════════════════════════════════════════════
  基于野火IM设计文档的UI提取执行计划
═══════════════════════════════════════════════════════════════

基础文档: UI交互设计文档.md（已提取）
执行对象: 新对话或当前对话
目标: 系统化提取野火IM UI资源并集成到蓝信
时间: 2-3天

═══════════════════════════════════════════════════════════════
📊 根据设计文档识别的关键UI组件
═══════════════════════════════════════════════════════════════

【从第五章：设计规范】提取:

1. 颜色系统（colors.xml）:
   主色: #3B62E0 (蓝色)
   强调色: #F95569 (红色)
   成功色: #45C01A (绿色)
   主要文字: #1D1D1D
   次要文字: #B3B3B3
   背景: #EDEDED
   分割线: #E5E5E5

2. 尺寸规范（dimens.xml）:
   会话头像: 48dp × 48dp
   消息头像: 40dp × 40dp
   列表项高度: 56dp ~ 72dp
   左右边距: 16dp
   元素间距: 8dp ~ 16dp
   标题字体: 16sp ~ 20sp
   正文字体: 14sp ~ 16sp

3. 圆角规范:
   头像: 4dp 或圆形
   按钮: 4dp
   卡片: 8dp
   消息气泡: 自定义形状

【从第三章：核心模块UI】提取:

4. 会话列表Item:
   布局: conversationlist_item_conversation.xml
   包含: 头像、未读徽章、标题、时间、消息预览

5. 消息气泡布局:
   发送: conversation_item_message_container_send.xml
   接收: conversation_item_message_container_receive.xml
   
6. 消息类型（13种）:
   - conversation_item_text_*.xml
   - conversation_item_image_*.xml
   - conversation_item_audio_*.xml (语音)
   - conversation_item_video_*.xml
   - conversation_item_file_*.xml
   - conversation_item_location_*.xml
   - conversation_item_user_card_*.xml
   - conversation_item_notification.xml
   - conversation_item_recall_*.xml

7. 输入面板:
   布局: conversation_input_panel.xml
   扩展: conversation_ext_layout.xml（2×4网格）

【从第七章：图标资源】提取:

8. 关键图标:
   - img_bubble_send（发送气泡背景）⭐
   - img_bubble_receive（接收气泡背景）⭐
   - ic_audio（语音图标）⭐
   - ic_camera（相机）
   - ic_file（文件）
   - ic_location（位置）

═══════════════════════════════════════════════════════════════
🎯 优先级提取清单（基于设计文档）
═══════════════════════════════════════════════════════════════

【P0 - 核心消息气泡】必须提取（第1天）

从野火IM提取 → 适配到蓝信:

1. 文本消息气泡:
   conversation_item_text_send.xml 
   → item_message_sent_wf.xml
   
   conversation_item_text_receive.xml
   → item_message_received_wf.xml

2. 语音消息气泡:
   conversation_item_audio_send.xml
   → item_message_voice_sent_wf.xml
   
3. 图片消息气泡:
   conversation_item_image_send.xml
   → item_message_image_sent_wf.xml

4. 视频消息气泡:
   conversation_item_video_send.xml
   → item_message_video_sent_wf.xml

5. 文件消息气泡:
   conversation_item_file_send.xml
   → item_message_file_sent_wf.xml

6. 消息气泡背景:
   img_bubble_send.xml/png（蓝色气泡）⭐
   img_bubble_receive.xml/png（白色气泡）⭐

【P1 - 输入面板和扩展】重要（第1天下午）

7. 输入面板:
   conversation_input_panel.xml
   → chat_input_panel_wf.xml

8. 扩展功能面板:
   conversation_ext_layout.xml
   → dialog_more_options_wf.xml
   
   设计: 2行4列网格
   图标: 相册、拍摄、位置、文件、视频、音频、名片、自定义

【P2 - 颜色和尺寸】基础（第1天）

9. 颜色配置:
   提取野火IM的colors.xml
   合并到蓝信（保留蓝信品牌色）

10. 尺寸配置:
    提取野火IM的dimens.xml
    合并到蓝信

【P3 - 会话列表】优化（第2天）

11. 会话列表Item:
    conversationlist_item_conversation.xml
    → item_conversation_wf.xml
    
    包含:
    - 48dp头像
    - 未读徽章
    - 标题+时间
    - 消息预览

【P4 - 聊天界面主布局】优化（第2天）

12. 聊天界面:
    conversation_activity.xml（或Fragment布局）
    → activity_chat_wf.xml
    
    特点:
    - InputAwareLayout（键盘感知）
    - SwipeRefreshLayout（下拉加载历史）
    - 未读消息提示悬浮按钮

【P5 - 其他组件】可选（第3天）

13. 联系人列表Item
14. 用户信息页
15. 设置页面
16. 自定义组件（QuickIndexBar等）

═══════════════════════════════════════════════════════════════
📝 详细执行计划（给新对话）
═══════════════════════════════════════════════════════════════

前提: 野火IM项目已下载，路径已知

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
第1天上午（4小时）- 核心消息气泡
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

任务1.1: 提取消息气泡背景（30分钟）

1. 查找气泡背景文件:
   list_dir: [野火IM]/uikit/src/main/res/drawable/
   grep: "bubble" in drawable
   
2. 读取气泡背景:
   read_file: [野火IM]/uikit/src/main/res/drawable/img_bubble_send.xml
   read_file: [野火IM]/uikit/src/main/res/drawable/img_bubble_receive.xml
   
3. 复制到蓝信:
   write: apps/android/app/src/main/res/drawable/bg_message_bubble_send.xml
   write: apps/android/app/src/main/res/drawable/bg_message_bubble_receive.xml
   
   注意: 添加来源注释（Apache 2.0）

任务1.2: 提取文本消息气泡布局（1小时）

1. 读取野火IM布局:
   read_file: [野火IM]/uikit/src/main/res/layout/conversation_item_text_send.xml
   
2. 分析布局结构:
   - 记录根布局类型（ConstraintLayout/RelativeLayout等）
   - 记录所有视图组件（TextView、ImageView等）
   - 记录所有android:id
   - 记录关键属性（textSize、padding、margin等）

3. 适配到蓝信命名:
   野火IM ID → 蓝信ID映射:
   - tv_content → tv_message_content
   - tv_time → tv_message_time
   - iv_avatar → iv_user_avatar
   - message_bubble → message_bubble_container

4. 创建新布局:
   write: apps/android/app/src/main/res/layout/item_message_sent_wf.xml
   
   保留:
   - 野火IM的视觉设计
   - 野火IM的间距和圆角
   
   调整:
   - ID命名为蓝信风格
   - 颜色引用蓝信的colors.xml

5. 重复步骤1-4，提取接收消息布局:
   write: apps/android/app/src/main/res/layout/item_message_received_wf.xml

任务1.3: 提取其他消息类型布局（1.5小时）

按优先级提取:
  1. 语音消息: conversation_item_audio_*.xml
  2. 图片消息: conversation_item_image_*.xml
  3. 视频消息: conversation_item_video_*.xml
  4. 文件消息: conversation_item_file_*.xml

对于每种类型:
  - 读取野火IM布局
  - 分析并适配
  - 创建蓝信新布局

任务1.4: 提取相关图标（1小时）

1. 查找语音相关图标:
   list_dir: [野火IM]/uikit/src/main/res/drawable/
   grep: "audio|voice" 
   
2. 提取关键图标:
   - ic_audio_play_3（语音播放动画）
   - ic_file_*（文件类型图标）
   - ic_video_play（视频播放按钮）

3. 逐个复制到蓝信

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
第1天下午（4小时）- 输入面板和配置
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

任务2.1: 提取输入面板布局（1小时）

1. 读取输入面板:
   read_file: [野火IM]/uikit/src/main/res/layout/conversation_input_panel.xml
   
2. 分析设计:
   根据文档第3.2章节:
   - EditText输入框
   - 表情按钮（😊）
   - 发送/语音按钮
   - 语音录制按钮("按住 说话")

3. 创建蓝信版本:
   write: apps/android/app/src/main/res/layout/chat_input_panel_wf.xml
   
   保留蓝信的按钮ID，使用野火IM的视觉设计

任务2.2: 提取扩展功能面板（1小时）

1. 读取扩展面板:
   read_file: [野火IM]/uikit/src/main/res/layout/conversation_ext_layout.xml
   
2. 根据文档设计（2行4列）:
   Row 1: 相册、拍摄、位置、文件
   Row 2: 视频、音频、名片、自定义
   
3. 适配到蓝信的8个选项:
   - 保留野火IM的网格布局
   - 调整为蓝信的功能项
   - 使用野火IM的图标样式

4. 创建新布局:
   write: apps/android/app/src/main/res/layout/dialog_more_options_wf.xml

任务2.3: 提取并合并颜色配置（1小时）

1. 读取野火IM颜色:
   read_file: [野火IM]/uikit/src/main/res/values/colors.xml
   
2. 读取蓝信当前颜色:
   read_file: apps/android/app/src/main/res/values/colors.xml
   
3. 合并策略（根据设计文档第5.1章）:
   从野火IM提取:
   - black1: #1D1D1D（主要文字）
   - gray11: #B3B3B3（次要文字）
   - gray5: #EDEDED（主背景）
   - line: #E5E5E5（分割线）
   - red0: #F95569（强调色）
   - green0: #45C01A（成功色）
   
   保留蓝信的:
   - primary: [蓝信品牌色]（保持品牌识别）
   
4. 创建合并后的配置:
   search_replace: apps/android/app/src/main/res/values/colors.xml
   添加野火IM的颜色，注释来源

任务2.4: 提取并合并尺寸配置（1小时）

1. 读取野火IM尺寸:
   read_file: [野火IM]/uikit/src/main/res/values/dimens.xml
   
2. 根据文档第5.2章节，提取:
   - avatar_size_conversation: 48dp
   - avatar_size_message: 40dp
   - avatar_size_large: 80dp
   - list_item_height: 56dp
   - spacing_normal: 16dp
   - spacing_small: 8dp
   - text_size_title: 16sp
   - text_size_normal: 14sp
   - text_size_small: 12sp

3. 合并到蓝信:
   search_replace: apps/android/app/src/main/res/values/dimens.xml

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
第2天上午（4小时）- 更新ChatAdapter
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

任务3.1: 更新文本消息ViewHolder（1小时）

1. 读取当前ChatAdapter:
   read_file: apps/android/app/src/main/java/com/lanxin/im/ui/chat/ChatAdapter.kt
   
2. 修改SentMessageViewHolder:
   
   更新onCreateViewHolder:
   ```kotlin
   VIEW_TYPE_SENT -> {
       val view = LayoutInflater.from(parent.context)
           .inflate(R.layout.item_message_sent_wf, parent, false) // 新布局
       SentMessageViewHolder(view)
   }
   ```
   
   更新findViewById（根据新布局的ID）:
   ```kotlin
   private val tvContent: TextView = itemView.findViewById(R.id.tv_message_content)
   private val tvTime: TextView = itemView.findViewById(R.id.tv_message_time)
   private val ivAvatar: ImageView = itemView.findViewById(R.id.iv_user_avatar)
   ```
   
3. 保留所有业务逻辑:
   - message.content绑定
   - 时间格式化
   - 长按菜单
   - @高亮逻辑
   - 阅后即焚逻辑

4. 测试编译:
   read_lints: apps/android/app/src/main/java/com/lanxin/im/ui/chat/ChatAdapter.kt

任务3.2: 更新其他消息类型ViewHolder（2小时）

依次更新:
  - VoiceSentViewHolder → 使用item_message_voice_sent_wf.xml
  - ImageSentViewHolder → 使用item_message_image_sent_wf.xml
  - VideoSentViewHolder → 使用item_message_video_sent_wf.xml
  - FileSentViewHolder → 使用item_message_file_sent_wf.xml

对于每个ViewHolder:
  1. 更新inflate布局
  2. 更新findViewById
  3. 保留业务逻辑
  4. 测试编译

任务3.3: Git提交（10分钟）

```
git add apps/android/app/src/main/res/layout/item_message_*_wf.xml
git add apps/android/app/src/main/res/drawable/
git add apps/android/app/src/main/res/values/
git commit -m "UI: Extract message bubble layouts from WildFireChat - text, voice, image, video, file message layouts with improved design"
```

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
第2天下午（4小时）- 更新ChatActivity和测试
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

任务4.1: 更新ChatActivity主布局（1.5小时）

1. 读取野火IM聊天界面:
   read_file: [野火IM]/uikit/src/main/res/layout/conversation_fragment.xml
   或: conversation_activity.xml

2. 参考设计文档第3.2章节创建新布局:
   
   核心结构（根据文档）:
   ```xml
   InputAwareLayout（键盘感知）
   └── FrameLayout
       ├── SwipeRefreshLayout（下拉加载历史）
       │   └── RecyclerView（消息列表）
       ├── 新布局的输入面板
       └── 未读消息提示按钮（右下角悬浮）
   ```

3. 创建新布局:
   write: apps/android/app/src/main/res/layout/activity_chat_wf.xml

4. 更新ChatActivity.kt:
   search_replace: setContentView(R.layout.activity_chat)
   改为: setContentView(R.layout.activity_chat_wf)
   
   更新所有findViewById使用新布局的ID

任务4.2: 集成输入面板（1小时）

1. 在activity_chat_wf.xml中使用新的输入面板
2. 在ChatActivity.kt中更新输入面板相关代码
3. 保留所有功能逻辑（录音、发送、更多选项）

任务4.3: 测试和修复（1.5小时）

1. 编译检查:
   read_lints: apps/android/app/src/main/java/com/lanxin/im/ui/chat/

2. 修复所有错误

3. 功能测试:
   - 文本消息显示
   - 语音消息显示
   - 图片消息显示
   - 视频消息显示
   - 文件消息显示
   - 输入框功能
   - 更多选项面板

4. Git提交:
   git commit -m "UI: Update ChatActivity with WildFire UI design - new layouts integrated, all features preserved"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
第3天（可选）- 优化其他界面
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

任务5.1: 优化会话列表（2小时）
任务5.2: 优化联系人列表（2小时）
任务5.3: 添加动画效果（2小时）
任务5.4: 细节打磨（2小时）

═══════════════════════════════════════════════════════════════
🔑 关键适配策略（基于设计文档）
═══════════════════════════════════════════════════════════════

根据文档分析的适配要点:

1. 布局结构适配:
   野火IM使用:
   - InputAwareLayout（键盘感知）
   - BubbleImageView（气泡图片）
   - QuickIndexBar（快速索引）
   
   蓝信替代:
   - 使用标准ConstraintLayout + 键盘监听
   - 使用ImageView + shape背景
   - 使用标准索引（可选）

2. 消息容器结构:
   根据文档第3.2章节：
   ```
   野火IM: conversation_item_message_container_*.xml（容器）
           + conversation_item_text_*.xml（内容）
   
   蓝信简化: 直接使用 item_message_*_wf.xml（合并容器和内容）
   ```

3. 颜色适配:
   ```
   野火IM主色: #3B62E0（蓝色）
   蓝信主色: [保留你的品牌色]
   
   策略: 
   - 消息气泡使用野火IM配色
   - 导航栏和品牌元素保留蓝信配色
   ```

4. 尺寸适配:
   ```
   完全使用野火IM的尺寸规范:
   - 消息头像: 40dp
   - 会话头像: 48dp
   - 间距: 16dp/8dp
   - 字体: 16sp/14sp/12sp
   ```

5. 交互保留:
   ```
   蓝信保留自己的:
   - 点击事件回调
   - 长按菜单逻辑
   - API调用
   - 数据绑定
   
   可以学习野火IM的:
   - 下拉加载历史（SwipeRefreshLayout）
   - 未读消息提示悬浮按钮
   - 输入面板状态切换动画
   ```

═══════════════════════════════════════════════════════════════
⚠️ 重要注意事项
═══════════════════════════════════════════════════════════════

1. 版权声明（必须）:
   在每个从野火IM提取的文件开头添加:
   ```xml
   <!--
     Source: WildFireChat (野火IM)
     GitHub: https://github.com/wildfirechat/android-chat
     License: Apache 2.0
     Adapted for LanXin IM project
   -->
   ```

2. ID命名规范:
   保持蓝信的命名风格，避免大规模修改Kotlin代码:
   - tv_content → tv_message_content
   - iv_avatar → iv_user_avatar
   - 保持一致性

3. 不要提取的内容:
   ❌ ChatManager（野火IM的IM核心）
   ❌ ViewModel实现（保留蓝信的）
   ❌ API调用代码（保留蓝信的）
   ❌ 数据模型（保留蓝信的Message、User等）
   ❌ 业务逻辑代码

4. 可以提取的内容:
   ✅ layout布局文件
   ✅ drawable图标和背景
   ✅ colors/dimens/styles配置
   ✅ 自定义View组件（可选）
   ✅ 动画资源（可选）

5. 测试重点:
   - 所有消息类型正常显示
   - 点击和长按事件正常
   - 颜色和间距协调
   - 无编译错误
   - 无功能退化

═══════════════════════════════════════════════════════════════
📋 给新对话的执行指令（复制粘贴）
═══════════════════════════════════════════════════════════════

任务：基于野火IM UI交互设计文档，提取UI资源到蓝信项目

准备工作：
1. 阅读设计文档：
   read_file: UI交互设计文档.md
   
2. 阅读执行计划：
   read_file: UI_EXTRACTION_EXECUTION_PLAN.txt

3. 确认野火IM路径（请用户提供）

执行计划（2天）：

第1天上午 - 核心消息气泡：
  1. 提取消息气泡背景drawable
  2. 提取文本消息布局（发送/接收）
  3. 提取语音/图片/视频/文件消息布局
  4. 提取相关图标资源
  
第1天下午 - 输入面板和配置：
  5. 提取输入面板布局
  6. 提取扩展功能面板
  7. 提取并合并colors.xml
  8. 提取并合并dimens.xml

第2天上午 - 更新Adapter：
  9. 更新ChatAdapter使用新布局
  10. 更新所有ViewHolder的findViewById
  11. 保留所有业务逻辑
  12. 测试编译

第2天下午 - 更新Activity和测试：
  13. 更新ChatActivity主布局
  14. 更新ChatActivity.kt代码
  15. 全功能测试
  16. 修复问题
  17. Git提交和文档

关键原则：
- ✅ 仅提取UI，保留蓝信业务逻辑
- ✅ 保持代码可维护性
- ✅ 添加Apache 2.0来源注释
- ✅ 渐进式替换（先创建*_wf.xml新文件）

请开始执行，告诉我野火IM的本地路径。

═══════════════════════════════════════════════════════════════
📊 预期效果
═══════════════════════════════════════════════════════════════

UI改进对比：

当前蓝信 UI → 集成野火IM后：

消息气泡：
  简单矩形 → 精美气泡（带尾巴、阴影）
  
颜色：
  基础配色 → 专业IM配色（层次分明）
  
间距：
  不够统一 → 遵循Material规范
  
图标：
  基础图标 → 精美统一的图标系统
  
输入框：
  基础输入 → 多状态输入面板（文本/语音/表情）
  
整体评分：
  60分 → 85-90分

UI质量提升：70-80%

═══════════════════════════════════════════════════════════════

